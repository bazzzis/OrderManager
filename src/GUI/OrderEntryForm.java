/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Domain.Address;
import Domain.Order;
import Domain.State;
import MySQL.MySqlAddressDao;
import MySQL.MySqlOrderDao;
import MySQL.MysqlStateDao;
import java.awt.event.WindowEvent;
import java.sql.Date;
import java.sql.Time;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author bazziss
 */
public class OrderEntryForm extends javax.swing.JFrame {

    MySqlAddressDao addservice = new MySqlAddressDao();

    /**
     * Creates new form OrderEntryForm
     */
    public OrderEntryForm() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jTextFieldPCKREF = new javax.swing.JTextField();
        jTextFieldPCKZIP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldPCKSTR = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField1PCKCN = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldPCKCTY = new javax.swing.JTextField();
        jTextFieldPCKR = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButtonFindPickUpAddress = new javax.swing.JButton();
        jComboBoxPickUpCountry = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        jTextFieldDELREF = new javax.swing.JTextField();
        jTextFieldDELZIP = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldDELSTR = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextFieldDELCMN = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextFieldDELCTY = new javax.swing.JTextField();
        jTextFieldDELR = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jButtonFindDeliveryAddress = new javax.swing.JButton();
        jComboBoxDeliveryCountry = new javax.swing.JComboBox();
        jPanel10 = new javax.swing.JPanel();
        jTextFieldINVREF = new javax.swing.JTextField();
        jTextFieldINVZIP = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextFieldINVSTR = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jTextFieldINVCMN = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextFieldINVCTY = new javax.swing.JTextField();
        jTextFieldINVR = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jButtonFindInvoiceAddress = new javax.swing.JButton();
        jComboBoxInvoiceCountry = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldpickUpDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPickUpTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDeliveryDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldDeliveryTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxCountry3 = new javax.swing.JComboBox();
        jButtonInsertOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Pick-up address"));
        jPanel7.setAutoscrolls(true);
        jPanel7.setName(""); // NOI18N
        jPanel7.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPanel7PropertyChange(evt);
            }
        });

        jLabel7.setText("Country");

        jLabel8.setText("City and zip code");

        jLabel9.setText("reference");

        jLabel10.setText("Relation");

        jLabel11.setText("Street");

        jLabel12.setText("Company Name");

        jButtonFindPickUpAddress.setText("Find");
        jButtonFindPickUpAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindPickUpAddressActionPerformed(evt);
            }
        });

        jComboBoxPickUpCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AF || Afghanistan", "AX || Åland Islands", "AL || Albania", "DZ || Algeria", "AS || American Samoa", "AD || Andorra", "AO || Angola", "AI || Anguilla", "AQ || Antarctica", "AG || Antigua and Barbuda", "AR || Argentina", "AM || Armenia", "AW || Aruba", "AU || Australia", "AT || Austria", "AZ || Azerbaijan", "BS || Bahamas", "BH || Bahrain", "BD || Bangladesh", "BB || Barbados", "BY || Belarus", "BE || Belgium", "BZ || Belize", "BJ || Benin", "BM || Bermuda", "BT || Bhutan", "BO || Bolivia (Plurinational State of)", "BQ || Bonaire, Sint Eustatius and Saba", "BA || Bosnia and Herzegovina", "BW || Botswana", "BV || Bouvet Island", "BR || Brazil", "IO || British Indian Ocean Territory", "BN || Brunei Darussalam", "BG || Bulgaria", "BF || Burkina Faso", "BI || Burundi", "KH || Cambodia", "CM || Cameroon", "CA || Canada", "CV || Cabo Verde", "KY || Cayman Islands", "CF || Central African Republic", "TD || Chad", "CL || Chile", "CN || China", "CX || Christmas Island", "CC || Cocos (Keeling) Islands", "CO || Colombia", "KM || Comoros", "CG || Congo", "CD || Congo (Democratic Republic of the)", "CK || Cook Islands", "CR || Costa Rica", "CI || Côte d'Ivoire", "HR || Croatia", "CU || Cuba", "CW || Curaçao", "CY || Cyprus", "CZ || Czech Republic", "DK || Denmark", "DJ || Djibouti", "DM || Dominica", "DO || Dominican Republic", "EC || Ecuador", "EG || Egypt", "SV || El Salvador", "GQ || Equatorial Guinea", "ER || Eritrea", "EE || Estonia", "ET || Ethiopia", "FK || Falkland Islands (Malvinas)", "FO || Faroe Islands", "FJ || Fiji", "FI || Finland", "FR || France", "GF || French Guiana", "PF || French Polynesia", "TF || French Southern Territories", "GA || Gabon", "GM || Gambia", "GE || Georgia", "DE || Germany", "GH || Ghana", "GI || Gibraltar", "GR || Greece", "GL || Greenland", "GD || Grenada", "GP || Guadeloupe", "GU || Guam", "GT || Guatemala", "GG || Guernsey", "GN || Guinea", "GW || Guinea-Bissau", "GY || Guyana", "HT || Haiti", "HM || Heard Island and McDonald Islands", "VA || Holy See", "HN || Honduras", "HK || Hong Kong", "HU || Hungary", "IS || Iceland", "IN || India", "ID || Indonesia", "IR || Iran (Islamic Republic of)", "IQ || Iraq", "IE || Ireland", "IM || Isle of Man", "IL || Israel", "IT || Italy", "JM || Jamaica", "JP || Japan", "JE || Jersey", "JO || Jordan", "KZ || Kazakhstan", "KE || Kenya", "KI || Kiribati", "KP || Korea (Democratic People's Republic of)", "KR || Korea (Republic of)", "KW || Kuwait", "KG || Kyrgyzstan", "LA || Lao People's Democratic Republic", "LV || Latvia", "LB || Lebanon", "LS || Lesotho", "LR || Liberia", "LY || Libya", "LI || Liechtenstein", "LT || Lithuania", "LU || Luxembourg", "MO || Macao", "MK || Macedonia (the former Yugoslav Republic of)", "MG || Madagascar", "MW || Malawi", "MY || Malaysia", "MV || Maldives", "ML || Mali", "MT || Malta", "MH || Marshall Islands", "MQ || Martinique", "MR || Mauritania", "MU || Mauritius", "YT || Mayotte", "MX || Mexico", "FM || Micronesia (Federated States of)", "MD || Moldova (Republic of)", "MC || Monaco", "MN || Mongolia", "ME || Montenegro", "MS || Montserrat", "MA || Morocco", "MZ || Mozambique", "MM || Myanmar", "NA || Namibia", "NR || Nauru", "NP || Nepal", "NL || Netherlands", "NC || New Caledonia", "NZ || New Zealand", "NI || Nicaragua", "NE || Niger", "NG || Nigeria", "NU || Niue", "NF || Norfolk Island", "MP || Northern Mariana Islands", "NO || Norway", "OM || Oman", "PK || Pakistan", "PW || Palau", "PS || Palestine, State of", "PA || Panama", "PG || Papua New Guinea", "PY || Paraguay", "PE || Peru", "PH || Philippines", "PN || Pitcairn", "PL || Poland", "PT || Portugal", "PR || Puerto Rico", "QA || Qatar", "RE || Réunion", "RO || Romania", "RU || Russian Federation", "RW || Rwanda", "BL || Saint Barthélemy", "SH || Saint Helena, Ascension and Tristan da Cunha", "KN || Saint Kitts and Nevis", "LC || Saint Lucia", "MF || Saint Martin (French part)", "PM || Saint Pierre and Miquelon", "VC || Saint Vincent and the Grenadines", "WS || Samoa", "SM || San Marino", "ST || Sao Tome and Principe", "SA || Saudi Arabia", "SN || Senegal", "RS || Serbia", "SC || Seychelles", "SL || Sierra Leone", "SG || Singapore", "SX || Sint Maarten (Dutch part)", "SK || Slovakia", "SI || Slovenia", "SB || Solomon Islands", "SO || Somalia", "ZA || South Africa", "GS || South Georgia and the South Sandwich Islands", "SS || South Sudan", "ES || Spain", "LK || Sri Lanka", "SD || Sudan", "SR || Suriname", "SJ || Svalbard and Jan Mayen", "SZ || Swaziland", "SE || Sweden", "CH || Switzerland", "SY || Syrian Arab Republic", "TW || Taiwan, Province of China", "TJ || Tajikistan", "TZ || Tanzania, United Republic of", "TH || Thailand", "TL || Timor-Leste", "TG || Togo", "TK || Tokelau", "TO || Tonga", "TT || Trinidad and Tobago", "TN || Tunisia", "TR || Turkey", "TM || Turkmenistan", "TC || Turks and Caicos Islands", "TV || Tuvalu", "UG || Uganda", "UA || Ukraine", "AE || United Arab Emirates", "GB || United Kingdom of Great Britain and Northern Ireland", "US || United States of America", "UM || United States Minor Outlying Islands", "UY || Uruguay", "UZ || Uzbekistan", "VU || Vanuatu", "VE || Venezuela (Bolivarian Republic of)", "VN || Viet Nam", "VG || Virgin Islands (British)", "VI || Virgin Islands (U.S.)", "WF || Wallis and Futuna", "EH || Western Sahara", "YE || Yemen", "ZM || Zambia", "ZW || Zimbabwe", " " }));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel12)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldPCKREF, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(jTextFieldPCKR)
                            .addComponent(jTextField1PCKCN)
                            .addComponent(jTextFieldPCKSTR)
                            .addComponent(jTextFieldPCKCTY))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldPCKZIP, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                            .addComponent(jButtonFindPickUpAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jComboBoxPickUpCountry, 0, 1, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPCKR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jButtonFindPickUpAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField1PCKCN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPCKSTR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPCKCTY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextFieldPCKZIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBoxPickUpCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldPCKREF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Delivery address"));
        jPanel9.setAutoscrolls(true);
        jPanel9.setName(""); // NOI18N

        jLabel19.setText("Country");

        jLabel20.setText("City and zip code");

        jLabel21.setText("reference");

        jLabel22.setText("Relation");

        jLabel23.setText("Street");

        jLabel24.setText("Company Name");

        jButtonFindDeliveryAddress.setText("Find");
        jButtonFindDeliveryAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindDeliveryAddressActionPerformed(evt);
            }
        });

        jComboBoxDeliveryCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AF || Afghanistan", "AX || Åland Islands", "AL || Albania", "DZ || Algeria", "AS || American Samoa", "AD || Andorra", "AO || Angola", "AI || Anguilla", "AQ || Antarctica", "AG || Antigua and Barbuda", "AR || Argentina", "AM || Armenia", "AW || Aruba", "AU || Australia", "AT || Austria", "AZ || Azerbaijan", "BS || Bahamas", "BH || Bahrain", "BD || Bangladesh", "BB || Barbados", "BY || Belarus", "BE || Belgium", "BZ || Belize", "BJ || Benin", "BM || Bermuda", "BT || Bhutan", "BO || Bolivia (Plurinational State of)", "BQ || Bonaire, Sint Eustatius and Saba", "BA || Bosnia and Herzegovina", "BW || Botswana", "BV || Bouvet Island", "BR || Brazil", "IO || British Indian Ocean Territory", "BN || Brunei Darussalam", "BG || Bulgaria", "BF || Burkina Faso", "BI || Burundi", "KH || Cambodia", "CM || Cameroon", "CA || Canada", "CV || Cabo Verde", "KY || Cayman Islands", "CF || Central African Republic", "TD || Chad", "CL || Chile", "CN || China", "CX || Christmas Island", "CC || Cocos (Keeling) Islands", "CO || Colombia", "KM || Comoros", "CG || Congo", "CD || Congo (Democratic Republic of the)", "CK || Cook Islands", "CR || Costa Rica", "CI || Côte d'Ivoire", "HR || Croatia", "CU || Cuba", "CW || Curaçao", "CY || Cyprus", "CZ || Czech Republic", "DK || Denmark", "DJ || Djibouti", "DM || Dominica", "DO || Dominican Republic", "EC || Ecuador", "EG || Egypt", "SV || El Salvador", "GQ || Equatorial Guinea", "ER || Eritrea", "EE || Estonia", "ET || Ethiopia", "FK || Falkland Islands (Malvinas)", "FO || Faroe Islands", "FJ || Fiji", "FI || Finland", "FR || France", "GF || French Guiana", "PF || French Polynesia", "TF || French Southern Territories", "GA || Gabon", "GM || Gambia", "GE || Georgia", "DE || Germany", "GH || Ghana", "GI || Gibraltar", "GR || Greece", "GL || Greenland", "GD || Grenada", "GP || Guadeloupe", "GU || Guam", "GT || Guatemala", "GG || Guernsey", "GN || Guinea", "GW || Guinea-Bissau", "GY || Guyana", "HT || Haiti", "HM || Heard Island and McDonald Islands", "VA || Holy See", "HN || Honduras", "HK || Hong Kong", "HU || Hungary", "IS || Iceland", "IN || India", "ID || Indonesia", "IR || Iran (Islamic Republic of)", "IQ || Iraq", "IE || Ireland", "IM || Isle of Man", "IL || Israel", "IT || Italy", "JM || Jamaica", "JP || Japan", "JE || Jersey", "JO || Jordan", "KZ || Kazakhstan", "KE || Kenya", "KI || Kiribati", "KP || Korea (Democratic People's Republic of)", "KR || Korea (Republic of)", "KW || Kuwait", "KG || Kyrgyzstan", "LA || Lao People's Democratic Republic", "LV || Latvia", "LB || Lebanon", "LS || Lesotho", "LR || Liberia", "LY || Libya", "LI || Liechtenstein", "LT || Lithuania", "LU || Luxembourg", "MO || Macao", "MK || Macedonia (the former Yugoslav Republic of)", "MG || Madagascar", "MW || Malawi", "MY || Malaysia", "MV || Maldives", "ML || Mali", "MT || Malta", "MH || Marshall Islands", "MQ || Martinique", "MR || Mauritania", "MU || Mauritius", "YT || Mayotte", "MX || Mexico", "FM || Micronesia (Federated States of)", "MD || Moldova (Republic of)", "MC || Monaco", "MN || Mongolia", "ME || Montenegro", "MS || Montserrat", "MA || Morocco", "MZ || Mozambique", "MM || Myanmar", "NA || Namibia", "NR || Nauru", "NP || Nepal", "NL || Netherlands", "NC || New Caledonia", "NZ || New Zealand", "NI || Nicaragua", "NE || Niger", "NG || Nigeria", "NU || Niue", "NF || Norfolk Island", "MP || Northern Mariana Islands", "NO || Norway", "OM || Oman", "PK || Pakistan", "PW || Palau", "PS || Palestine, State of", "PA || Panama", "PG || Papua New Guinea", "PY || Paraguay", "PE || Peru", "PH || Philippines", "PN || Pitcairn", "PL || Poland", "PT || Portugal", "PR || Puerto Rico", "QA || Qatar", "RE || Réunion", "RO || Romania", "RU || Russian Federation", "RW || Rwanda", "BL || Saint Barthélemy", "SH || Saint Helena, Ascension and Tristan da Cunha", "KN || Saint Kitts and Nevis", "LC || Saint Lucia", "MF || Saint Martin (French part)", "PM || Saint Pierre and Miquelon", "VC || Saint Vincent and the Grenadines", "WS || Samoa", "SM || San Marino", "ST || Sao Tome and Principe", "SA || Saudi Arabia", "SN || Senegal", "RS || Serbia", "SC || Seychelles", "SL || Sierra Leone", "SG || Singapore", "SX || Sint Maarten (Dutch part)", "SK || Slovakia", "SI || Slovenia", "SB || Solomon Islands", "SO || Somalia", "ZA || South Africa", "GS || South Georgia and the South Sandwich Islands", "SS || South Sudan", "ES || Spain", "LK || Sri Lanka", "SD || Sudan", "SR || Suriname", "SJ || Svalbard and Jan Mayen", "SZ || Swaziland", "SE || Sweden", "CH || Switzerland", "SY || Syrian Arab Republic", "TW || Taiwan, Province of China", "TJ || Tajikistan", "TZ || Tanzania, United Republic of", "TH || Thailand", "TL || Timor-Leste", "TG || Togo", "TK || Tokelau", "TO || Tonga", "TT || Trinidad and Tobago", "TN || Tunisia", "TR || Turkey", "TM || Turkmenistan", "TC || Turks and Caicos Islands", "TV || Tuvalu", "UG || Uganda", "UA || Ukraine", "AE || United Arab Emirates", "GB || United Kingdom of Great Britain and Northern Ireland", "US || United States of America", "UM || United States Minor Outlying Islands", "UY || Uruguay", "UZ || Uzbekistan", "VU || Vanuatu", "VE || Venezuela (Bolivarian Republic of)", "VN || Viet Nam", "VG || Virgin Islands (British)", "VI || Virgin Islands (U.S.)", "WF || Wallis and Futuna", "EH || Western Sahara", "YE || Yemen", "ZM || Zambia", "ZW || Zimbabwe", " " }));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21)
                    .addComponent(jLabel24)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldDELREF, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(jTextFieldDELR)
                            .addComponent(jTextFieldDELCMN)
                            .addComponent(jTextFieldDELSTR)
                            .addComponent(jTextFieldDELCTY))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTextFieldDELZIP, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonFindDeliveryAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jComboBoxDeliveryCountry, 0, 1, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDELR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jButtonFindDeliveryAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jTextFieldDELCMN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDELSTR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDELCTY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jTextFieldDELZIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jComboBoxDeliveryCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextFieldDELREF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Invoice address"));
        jPanel10.setAutoscrolls(true);
        jPanel10.setName(""); // NOI18N

        jLabel25.setText("Country");

        jLabel26.setText("City and zip code");

        jLabel27.setText("reference");

        jLabel28.setText("Relation");

        jLabel29.setText("Street");

        jLabel30.setText("Company Name");

        jButtonFindInvoiceAddress.setText("Find");
        jButtonFindInvoiceAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindInvoiceAddressActionPerformed(evt);
            }
        });

        jComboBoxInvoiceCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AF || Afghanistan", "AX || Åland Islands", "AL || Albania", "DZ || Algeria", "AS || American Samoa", "AD || Andorra", "AO || Angola", "AI || Anguilla", "AQ || Antarctica", "AG || Antigua and Barbuda", "AR || Argentina", "AM || Armenia", "AW || Aruba", "AU || Australia", "AT || Austria", "AZ || Azerbaijan", "BS || Bahamas", "BH || Bahrain", "BD || Bangladesh", "BB || Barbados", "BY || Belarus", "BE || Belgium", "BZ || Belize", "BJ || Benin", "BM || Bermuda", "BT || Bhutan", "BO || Bolivia (Plurinational State of)", "BQ || Bonaire, Sint Eustatius and Saba", "BA || Bosnia and Herzegovina", "BW || Botswana", "BV || Bouvet Island", "BR || Brazil", "IO || British Indian Ocean Territory", "BN || Brunei Darussalam", "BG || Bulgaria", "BF || Burkina Faso", "BI || Burundi", "KH || Cambodia", "CM || Cameroon", "CA || Canada", "CV || Cabo Verde", "KY || Cayman Islands", "CF || Central African Republic", "TD || Chad", "CL || Chile", "CN || China", "CX || Christmas Island", "CC || Cocos (Keeling) Islands", "CO || Colombia", "KM || Comoros", "CG || Congo", "CD || Congo (Democratic Republic of the)", "CK || Cook Islands", "CR || Costa Rica", "CI || Côte d'Ivoire", "HR || Croatia", "CU || Cuba", "CW || Curaçao", "CY || Cyprus", "CZ || Czech Republic", "DK || Denmark", "DJ || Djibouti", "DM || Dominica", "DO || Dominican Republic", "EC || Ecuador", "EG || Egypt", "SV || El Salvador", "GQ || Equatorial Guinea", "ER || Eritrea", "EE || Estonia", "ET || Ethiopia", "FK || Falkland Islands (Malvinas)", "FO || Faroe Islands", "FJ || Fiji", "FI || Finland", "FR || France", "GF || French Guiana", "PF || French Polynesia", "TF || French Southern Territories", "GA || Gabon", "GM || Gambia", "GE || Georgia", "DE || Germany", "GH || Ghana", "GI || Gibraltar", "GR || Greece", "GL || Greenland", "GD || Grenada", "GP || Guadeloupe", "GU || Guam", "GT || Guatemala", "GG || Guernsey", "GN || Guinea", "GW || Guinea-Bissau", "GY || Guyana", "HT || Haiti", "HM || Heard Island and McDonald Islands", "VA || Holy See", "HN || Honduras", "HK || Hong Kong", "HU || Hungary", "IS || Iceland", "IN || India", "ID || Indonesia", "IR || Iran (Islamic Republic of)", "IQ || Iraq", "IE || Ireland", "IM || Isle of Man", "IL || Israel", "IT || Italy", "JM || Jamaica", "JP || Japan", "JE || Jersey", "JO || Jordan", "KZ || Kazakhstan", "KE || Kenya", "KI || Kiribati", "KP || Korea (Democratic People's Republic of)", "KR || Korea (Republic of)", "KW || Kuwait", "KG || Kyrgyzstan", "LA || Lao People's Democratic Republic", "LV || Latvia", "LB || Lebanon", "LS || Lesotho", "LR || Liberia", "LY || Libya", "LI || Liechtenstein", "LT || Lithuania", "LU || Luxembourg", "MO || Macao", "MK || Macedonia (the former Yugoslav Republic of)", "MG || Madagascar", "MW || Malawi", "MY || Malaysia", "MV || Maldives", "ML || Mali", "MT || Malta", "MH || Marshall Islands", "MQ || Martinique", "MR || Mauritania", "MU || Mauritius", "YT || Mayotte", "MX || Mexico", "FM || Micronesia (Federated States of)", "MD || Moldova (Republic of)", "MC || Monaco", "MN || Mongolia", "ME || Montenegro", "MS || Montserrat", "MA || Morocco", "MZ || Mozambique", "MM || Myanmar", "NA || Namibia", "NR || Nauru", "NP || Nepal", "NL || Netherlands", "NC || New Caledonia", "NZ || New Zealand", "NI || Nicaragua", "NE || Niger", "NG || Nigeria", "NU || Niue", "NF || Norfolk Island", "MP || Northern Mariana Islands", "NO || Norway", "OM || Oman", "PK || Pakistan", "PW || Palau", "PS || Palestine, State of", "PA || Panama", "PG || Papua New Guinea", "PY || Paraguay", "PE || Peru", "PH || Philippines", "PN || Pitcairn", "PL || Poland", "PT || Portugal", "PR || Puerto Rico", "QA || Qatar", "RE || Réunion", "RO || Romania", "RU || Russian Federation", "RW || Rwanda", "BL || Saint Barthélemy", "SH || Saint Helena, Ascension and Tristan da Cunha", "KN || Saint Kitts and Nevis", "LC || Saint Lucia", "MF || Saint Martin (French part)", "PM || Saint Pierre and Miquelon", "VC || Saint Vincent and the Grenadines", "WS || Samoa", "SM || San Marino", "ST || Sao Tome and Principe", "SA || Saudi Arabia", "SN || Senegal", "RS || Serbia", "SC || Seychelles", "SL || Sierra Leone", "SG || Singapore", "SX || Sint Maarten (Dutch part)", "SK || Slovakia", "SI || Slovenia", "SB || Solomon Islands", "SO || Somalia", "ZA || South Africa", "GS || South Georgia and the South Sandwich Islands", "SS || South Sudan", "ES || Spain", "LK || Sri Lanka", "SD || Sudan", "SR || Suriname", "SJ || Svalbard and Jan Mayen", "SZ || Swaziland", "SE || Sweden", "CH || Switzerland", "SY || Syrian Arab Republic", "TW || Taiwan, Province of China", "TJ || Tajikistan", "TZ || Tanzania, United Republic of", "TH || Thailand", "TL || Timor-Leste", "TG || Togo", "TK || Tokelau", "TO || Tonga", "TT || Trinidad and Tobago", "TN || Tunisia", "TR || Turkey", "TM || Turkmenistan", "TC || Turks and Caicos Islands", "TV || Tuvalu", "UG || Uganda", "UA || Ukraine", "AE || United Arab Emirates", "GB || United Kingdom of Great Britain and Northern Ireland", "US || United States of America", "UM || United States Minor Outlying Islands", "UY || Uruguay", "UZ || Uzbekistan", "VU || Vanuatu", "VE || Venezuela (Bolivarian Republic of)", "VN || Viet Nam", "VG || Virgin Islands (British)", "VI || Virgin Islands (U.S.)", "WF || Wallis and Futuna", "EH || Western Sahara", "YE || Yemen", "ZM || Zambia", "ZW || Zimbabwe", " " }));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27)
                    .addComponent(jLabel30)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel26)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldINVREF, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(jTextFieldINVR)
                            .addComponent(jTextFieldINVCMN)
                            .addComponent(jTextFieldINVSTR)
                            .addComponent(jTextFieldINVCTY))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTextFieldINVZIP, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonFindInvoiceAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jComboBoxInvoiceCountry, 0, 1, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldINVR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(jButtonFindInvoiceAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jTextFieldINVCMN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldINVSTR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldINVCTY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(jTextFieldINVZIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jComboBoxInvoiceCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextFieldINVREF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel1.setText("Pick-up: date  (YYYY-MM-DD)");

        jTextFieldpickUpDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldpickUpDateActionPerformed(evt);
            }
        });

        jLabel2.setText("Time(hh:mm:ss)");

        jLabel3.setText("delivery: date (YYYY-MM-DD)");

        jLabel4.setText("Time(hh:mm:ss)");

        jLabel5.setText("Delivery conditions:");

        jComboBoxCountry3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EXW (EX-Works)", "FOB (Free On Board)", "FCA (Free Carrier)", "FAS (Free Alongside Ship)", "CFR (Cost and Freight)", "CIF (Cost, Insurance and Freight)", "CPT (Carriage Paid To)", "CIP (Carriage and Insurance Paid To)", "DAT (Delivered At Terminal)", "DAP (Delivered At Place)", "DDP (Delivered Duty Paid)" }));

        jButtonInsertOrder.setText("Insert Order");
        jButtonInsertOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldpickUpDate, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPickUpTime, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldDeliveryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldDeliveryTime, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxCountry3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonInsertOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldpickUpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPickUpTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldDeliveryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldDeliveryTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBoxCountry3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(jButtonInsertOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel7PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPanel7PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel7PropertyChange

    private void jButtonFindPickUpAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindPickUpAddressActionPerformed

        if (jTextFieldPCKR.getText().trim() != "") {
            try {
                int id = Integer.parseInt(jTextFieldPCKR.getText().trim());
                Address colAddress = addservice.read(id, true);
                jTextFieldPCKR.setText(jTextFieldPCKR.getText().trim());
                jTextField1PCKCN.setText(colAddress.getCompanyName());
                jTextFieldPCKSTR.setText(colAddress.getStreetName());
                jTextFieldPCKCTY.setText(colAddress.getCity());
                Integer zip = colAddress.getZipCode();
                jTextFieldPCKZIP.setText(zip.toString());
                jComboBoxPickUpCountry.setSelectedItem(colAddress.getCountry());

            } catch (NumberFormatException e) {
                LOG.log(Level.SEVERE, e.toString());
                JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid number value! ", "Error!", JOptionPane.ERROR_MESSAGE);

            }
        }


    }//GEN-LAST:event_jButtonFindPickUpAddressActionPerformed

    private void jButtonFindDeliveryAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindDeliveryAddressActionPerformed
        if (jTextFieldDELR.getText().trim() != "") {
            try {
                int id = Integer.parseInt(jTextFieldDELR.getText().trim());
                Address delAddress = addservice.read(id, true);
                jTextFieldDELR.setText(jTextFieldDELR.getText().trim());
                jTextFieldDELCMN.setText(delAddress.getCompanyName());
                jTextFieldDELSTR.setText(delAddress.getStreetName());
                jTextFieldDELCTY.setText(delAddress.getCity());
                Integer zip = delAddress.getZipCode();
                jTextFieldDELZIP.setText(zip.toString());
                jComboBoxDeliveryCountry.setSelectedItem(delAddress.getCountry());

            } catch (NumberFormatException e) {
                LOG.log(Level.SEVERE, e.toString());
                JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid number value! ", "Error!", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButtonFindDeliveryAddressActionPerformed

    private void jButtonFindInvoiceAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindInvoiceAddressActionPerformed
        if (jTextFieldINVR.getText().trim() != "") {
            try {
                int id = Integer.parseInt(jTextFieldINVR.getText().trim());
                Address delAddress = addservice.read(id, true);
                jTextFieldINVR.setText(jTextFieldINVR.getText().trim());
                jTextFieldINVCMN.setText(delAddress.getCompanyName());
                jTextFieldINVSTR.setText(delAddress.getStreetName());
                jTextFieldINVCTY.setText(delAddress.getCity());
                Integer zip = delAddress.getZipCode();
                jTextFieldINVZIP.setText(zip.toString());
                jComboBoxInvoiceCountry.setSelectedItem(delAddress.getCountry());

            } catch (NumberFormatException e) {
                LOG.log(Level.SEVERE, e.toString());
                JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid number value! ", "Error!", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButtonFindInvoiceAddressActionPerformed

    private void jTextFieldpickUpDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldpickUpDateActionPerformed


    }//GEN-LAST:event_jTextFieldpickUpDateActionPerformed

    private void jButtonInsertOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertOrderActionPerformed

        Order order = new Order();
        boolean orderValidation = true;

        if (!"".equals(jTextFieldPCKR.getText())) {
            try {
                order.setPickUpRelation(Integer.parseInt(jTextFieldPCKR.getText()));
            } catch (NumberFormatException e) {
                orderValidation = false;
                JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid Pick-up relation! ", "Error!", JOptionPane.ERROR_MESSAGE);

            }
        }
        if (!"".equals(jTextField1PCKCN.getText())) {
            System.out.println(jTextField1PCKCN.getText());
            order.setPickUpCompanyName(jTextField1PCKCN.getText());
        } else {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Pick-up company name is mandatory! ", "Warning!", JOptionPane.WARNING_MESSAGE);

        }
        order.setPickUpStreetName(jTextFieldPCKSTR.getText());
        order.setPickUpCity(jTextFieldPCKCTY.getText());
        try {
            order.setPickUpZipCode(Integer.parseInt(jTextFieldPCKZIP.getText()));
        } catch (NumberFormatException e) {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid Pick-up ZIP code! ", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        order.setPickUpCountry((String) jComboBoxPickUpCountry.getSelectedItem());

        order.setPickupReference(jTextFieldPCKREF.getText());

        if (!"".equals(jTextFieldDELR.getText())) {
            try {
                order.setDeliveryRelation(Integer.parseInt(jTextFieldDELR.getText()));
            } catch (NumberFormatException e) {
                orderValidation = false;
                JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid Delivery relation! ", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (!"".equals(jTextFieldDELCMN.getText())) {
            order.setDeliveryCompanyName(jTextFieldDELCMN.getText());
        } else {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Delivery company name is mandatory! ", "Warning!", JOptionPane.WARNING_MESSAGE);

        }
        order.setDeliveryStreetName(jTextFieldDELSTR.getText());
        order.setDeliveryCity(jTextFieldDELCTY.getText());
        try {
            order.setDeliveryZipCode(Integer.parseInt(jTextFieldDELZIP.getText()));
        } catch (NumberFormatException e) {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid Delivery ZIP code! ", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        order.setDeliveryCountry((String) jComboBoxDeliveryCountry.getSelectedItem());

        order.setDeliveryReference(jTextFieldDELREF.getText());

        if (!"".equals(jTextFieldINVR.getText())) {
            try {
                order.setInvoiceRelation(Integer.parseInt(jTextFieldINVR.getText()));
            } catch (NumberFormatException e) {
                orderValidation = false;
                JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid Invoice relation! ", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Relation for Invoice address is madatory! ", "Warning!", JOptionPane.WARNING_MESSAGE);
        }
        if (!"".equals(jTextFieldINVCMN.getText())) {
            order.setInvoiceReference(jTextFieldINVCMN.getText());
        } else {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Invoice company name is mandatory! ", "Warning!", JOptionPane.WARNING_MESSAGE);

        }
        order.setInvoiceStreetName(jTextFieldINVSTR.getText());
        order.setInvoiceCity(jTextFieldINVCTY.getText());
        try {
            order.setInvoiceZipCode(Integer.parseInt(jTextFieldINVZIP.getText()));
        } catch (NumberFormatException e) {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Number format exception \nProvide a valid Invoice ZIP code! ", "Error!", JOptionPane.ERROR_MESSAGE);
        }

        order.setInvoiceCountry((String) jComboBoxInvoiceCountry.getSelectedItem());

        order.setInvoiceReference(jTextFieldINVREF.getText());

        try {
            Date pDate = Date.valueOf(jTextFieldpickUpDate.getText());
            order.setPickUpDate(pDate);

            Date dDate = Date.valueOf(jTextFieldDeliveryDate.getText());
            order.setDeliveryDate(dDate);
            if (!"".equals(jTextFieldPickUpTime.getText())) {
                Time pTime = Time.valueOf(jTextFieldPickUpTime.getText());
                order.setPickUpTime(pTime);
            } else {
                Time pTime = Time.valueOf("00:00:00");
                order.setPickUpTime(pTime);
            }
            if (!"".equals(jTextFieldDeliveryTime.getText())) {
                Time dTime = Time.valueOf(jTextFieldDeliveryTime.getText());
                order.setDeliveryTime(dTime);
            } else {
                Time dTime = Time.valueOf("00:00:00");
                order.setDeliveryTime(dTime);
            }
        } catch (IllegalArgumentException e) {
            orderValidation = false;
            JOptionPane.showMessageDialog(null, "Illegal argument exception \nProvide a valid Pick-up/Delivery date/time! ", "Error!", JOptionPane.ERROR_MESSAGE);

        }
        order.setDeliveryConditions((String) jComboBoxCountry3.getSelectedItem());
        if (orderValidation) {
            MySqlOrderDao orderService = new MySqlOrderDao();
           int orderId = orderService.create(order);
           State state = new State();
           state.setOrderId(orderId);
           state.setOk("ok");
           state.setAction("Order created");
            MysqlStateDao stateService = new MysqlStateDao();
            stateService.add(state);
            dispose();
        }
    }//GEN-LAST:event_jButtonInsertOrderActionPerformed
    private static final Logger LOG = Logger.getLogger(OrderEntryForm.class.getName());

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderEntryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OrderEntryForm oef = new OrderEntryForm();
                oef.setVisible(true);
                oef.dispatchEvent(new WindowEvent(oef, WindowEvent.WINDOW_CLOSING));

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFindDeliveryAddress;
    private javax.swing.JButton jButtonFindInvoiceAddress;
    private javax.swing.JButton jButtonFindPickUpAddress;
    private javax.swing.JButton jButtonInsertOrder;
    private javax.swing.JComboBox jComboBoxCountry3;
    private javax.swing.JComboBox jComboBoxDeliveryCountry;
    private javax.swing.JComboBox jComboBoxInvoiceCountry;
    private javax.swing.JComboBox jComboBoxPickUpCountry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField jTextField1PCKCN;
    private javax.swing.JTextField jTextFieldDELCMN;
    private javax.swing.JTextField jTextFieldDELCTY;
    private javax.swing.JTextField jTextFieldDELR;
    private javax.swing.JTextField jTextFieldDELREF;
    private javax.swing.JTextField jTextFieldDELSTR;
    private javax.swing.JTextField jTextFieldDELZIP;
    private javax.swing.JTextField jTextFieldDeliveryDate;
    private javax.swing.JTextField jTextFieldDeliveryTime;
    private javax.swing.JTextField jTextFieldINVCMN;
    private javax.swing.JTextField jTextFieldINVCTY;
    private javax.swing.JTextField jTextFieldINVR;
    private javax.swing.JTextField jTextFieldINVREF;
    private javax.swing.JTextField jTextFieldINVSTR;
    private javax.swing.JTextField jTextFieldINVZIP;
    private javax.swing.JTextField jTextFieldPCKCTY;
    private javax.swing.JTextField jTextFieldPCKR;
    private javax.swing.JTextField jTextFieldPCKREF;
    private javax.swing.JTextField jTextFieldPCKSTR;
    private javax.swing.JTextField jTextFieldPCKZIP;
    private javax.swing.JTextField jTextFieldPickUpTime;
    private javax.swing.JTextField jTextFieldpickUpDate;
    // End of variables declaration//GEN-END:variables
}
